{"version":3,"file":"md-parser.cjs.development.js","sources":["../src/Token.ts","../src/markup/Image.ts","../src/TokenReader.ts","../src/BaseParser.ts","../src/markup/Paragraph.ts","../src/markup/Header.ts","../src/markup/Text.ts","../src/markup/BlockMarkableItem.ts","../src/markup/Strikeout.ts","../src/markup/Strong.ts","../src/markup/Emphasis.ts","../src/markup/Code.ts","../src/MdParser.ts"],"sourcesContent":["export enum Token {\n    END, EMPHASIS, STRONG, STRIKEOUT, CODE, TEXT, _EMPHASIS, __STRONG, IMG\n}\n","import {BlockItem} from './BlockItem';\n\nexport class Image implements BlockItem {\n    private readonly name: string;\n    private readonly src: string;\n\n    constructor(name: string, src: string) {\n        this.name = name;\n        this.src = src;\n    }\n\n    toHtml(st: Array<string>): void {\n        st.push('<img alt=\\'');\n        st.push(this.name);\n        st.push('\\' src=\\'');\n        st.push(this.src);\n        st.push('\\'>');\n    }\n\n    toMarkdown(st: Array<string>): void {\n        throw st;\n    }\n\n\n}\n","import {Token} from './Token';\nimport {Image} from './markup/Image';\n\nexport class TokenReader {\n    private readonly source: string = '';\n\n    private pos: number = 0;\n\n    private curToken: Token = Token.CODE;\n\n    private curStringToken: string = '';\n\n    private tags: string[] = ['**', '__', '--', '*', '_', '`', '!['];\n\n    private imgName: string = '';\n\n    private imgSrc: string = '';\n\n    private strToToken = new Map([\n        ['**', Token.STRONG],\n        ['*', Token.EMPHASIS],\n        ['--', Token.STRIKEOUT],\n        ['`', Token.CODE],\n        ['_', Token._EMPHASIS],\n        ['__', Token.__STRONG],\n        ['![', Token.IMG]\n    ]);\n\n    private curTag: string = '';\n\n    constructor(source: string) {\n        this.source = source;\n        this.pos = 0;\n    }\n\n    private checkTag(): boolean {\n        for (const tag of this.tags) {\n            if (this.source.startsWith(tag, this.pos)) {\n                this.curTag = tag;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private test(ch: string): boolean {\n        return this.pos < this.source.length && ch === this.source[this.pos];\n    }\n\n    private parseImg(): void {\n        const start: number = this.pos;\n        let mid: number;\n        let end: number;\n        while (this.pos < this.source.length && !this.source.startsWith('](', this.pos)) {\n            this.pos++;\n        }\n        if (this.pos < this.source.length && this.source.startsWith('](', this.pos)) {\n            mid = this.pos;\n            while (this.pos < this.source.length && !this.source.startsWith(')', this.pos)) {\n                this.pos++;\n            }\n            if (this.pos < this.source.length && this.source.startsWith(')', this.pos)) {\n                end = this.pos;\n                this.imgName = this.source.substring(start, mid);\n                this.imgSrc = this.source.substring(mid + 2, end);\n                this.pos++;\n                return;\n            }\n        }\n        throw 'atata';\n    }\n\n    public getImg(): Image {\n        return new Image(this.imgName, this.imgSrc);\n    }\n\n    public nextToken(): Token {\n        if (this.pos >= this.source.length) {\n            return Token.END;\n        }\n\n        if (this.checkTag()) {\n            this.curStringToken = this.curTag;\n            const temp = this.strToToken.get(this.curTag);\n            this.curToken = temp === undefined ? Token.CODE : temp;\n            this.pos += this.curTag.length;\n            if (this.curToken === Token.IMG) {\n                this.parseImg();\n            }\n            return this.curToken;\n        }\n\n        const sb: Array<string> = new Array<string>();\n\n        while (this.pos < this.source.length && !this.checkTag()) {\n            const ch: string = this.source.charAt(this.pos++);\n            if (ch === '<') {\n                sb.push('&lt;');\n            } else if (ch === '>') {\n                sb.push('&gt;');\n            } else if (ch === '&') {\n                sb.push('&amp;');\n            } else if (ch === '\\\\' && this.pos < this.source.length && (this.test('*') || this.test('_'))) {\n                sb.push(this.source.charAt(this.pos++));\n            } else {\n                sb.push(ch);\n            }\n        }\n\n        this.curToken = Token.TEXT;\n\n        this.curStringToken = sb.join('');\n\n        return this.curToken;\n    }\n\n\n    public getStringToken(): string {\n        return this.curStringToken;\n    }\n}\n","import {TokenReader} from './TokenReader';\nimport {Token} from './Token';\n\nexport abstract class BaseParser {\n    protected tr: TokenReader;\n    protected curToken: Token;\n    protected curStringToken: string;\n\n    protected nextToken(): void {\n        this.curToken = this.tr.nextToken();\n        this.curStringToken = this.tr.getStringToken();\n    }\n\n    protected constructor() {\n        this.tr = new TokenReader('');\n        this.curToken = Token.CODE;\n        this.curStringToken = '';\n    }\n}\n","import {Markable} from './Markable';\nimport {BlockItem} from './BlockItem';\n\nexport class Paragraph implements Markable {\n    private readonly elements: Array<BlockItem>;\n\n    constructor(elements: Array<BlockItem>) {\n        this.elements = new Array<BlockItem>(...elements);\n    }\n\n    toHtml(st: Array<string>): void {\n        console.log('p: ', this.elements);\n        st.push('<p>');\n        for (const elem of this.elements) {\n            elem.toHtml(st);\n        }\n        st.push('</p>');\n    }\n\n    toMarkdown(st: Array<string>): void {\n        for (const elem of this.elements) {\n            elem.toMarkdown(st);\n        }\n    }\n\n\n}\n","import {Markable} from './Markable';\nimport {BlockItem} from './BlockItem';\n\nexport class Header implements Markable {\n\n    private elements: Array<BlockItem>;\n    private hLevel: number;\n\n    constructor(elements: Array<BlockItem>, hLevel: number) {\n        this.hLevel = hLevel;\n        this.elements = new Array<BlockItem>(...elements);\n    }\n\n    toHtml(st: Array<string>): void {\n        st.push(`<h${this.hLevel}>`);\n        for (const elem of this.elements) {\n            elem.toHtml(st);\n        }\n        st.push(`</h${this.hLevel}>`);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        throw st;\n    }\n\n}\n","import {BlockItem} from './BlockItem';\n\nexport class Text implements BlockItem {\n    private text: string;\n\n    constructor(text: string) {\n        this.text = text;\n    }\n\n    toHtml(st: Array<string>): void {\n        st.push(this.text);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        st.push(this.text);\n    }\n\n\n}\n","import {BlockItem} from './BlockItem';\n\nexport abstract class BlockMarkableItem implements BlockItem {\n    private elements: Array<BlockItem>;\n\n    protected constructor(elements: Array<BlockItem>) {\n        this.elements = new Array<BlockItem>(...elements);\n    }\n\n    protected toMarkdownSuper(start: string, end: string, st: Array<string>): void {\n        st.push(start);\n        for (const elem of this.elements) {\n            elem.toMarkdown(st);\n        }\n        st.push(end);\n    }\n\n    protected toHtmlSuper(start: string, end: string, st: Array<string>): void {\n        st.push(start);\n        for (const elem of this.elements) {\n            elem.toMarkdown(st);\n        }\n        st.push(end);\n    }\n\n    abstract toMarkdown(st: Array<string>): void;\n\n    abstract toHtml(st: Array<string>): void;\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Strikeout extends BlockMarkableItem {\n    constructor(elements: Array<BlockItem>) {\n        super(elements);\n    }\n\n    toHtml(st: Array<string>): void {\n        super.toHtmlSuper('<s>', '</s>', st);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        super.toMarkdownSuper('~', '~', st);\n    }\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Strong extends BlockMarkableItem {\n    constructor(elements: Array<BlockItem>) {\n        super(elements);\n    }\n\n    toHtml(st: Array<string>): void {\n        super.toHtmlSuper('<strong>', '</strong>', st);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        super.toMarkdownSuper('__', '__', st);\n    }\n}\n","import {BlockItem} from './BlockItem';\nimport {BlockMarkableItem} from './BlockMarkableItem';\n\nexport class Emphasis extends BlockMarkableItem {\n\n    constructor(elements: Array<BlockItem>) {\n        super(elements);\n    }\n\n    toHtml(st: Array<string>): void {\n        super.toHtmlSuper('<em>', '</em>', st);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        super.toMarkdownSuper('*', '*', st);\n    }\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Code extends BlockMarkableItem {\n\n    constructor(elements: Array<BlockItem>) {\n        super(elements);\n    }\n\n    toHtml(st: Array<string>): void {\n        super.toHtmlSuper('`', '`', st);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        super.toMarkdownSuper('<code>', '</code>', st);\n    }\n}\n","import {BaseParser} from './BaseParser';\nimport {Markable} from './markup/Markable';\nimport {TokenReader} from './TokenReader';\nimport {Paragraph} from './markup/Paragraph';\nimport {Header} from './markup/Header';\nimport {Token} from './Token';\nimport {BlockItem} from './markup/BlockItem';\nimport {Text} from './markup/Text';\nimport {Strikeout} from './markup/Strikeout';\nimport {Strong} from './markup/Strong';\nimport {Emphasis} from './markup/Emphasis';\nimport {Code} from './markup/Code';\n\n\nexport class MdParser extends BaseParser {\n    private readonly source: Array<string>;\n    private curElem: string = '';\n    private curLine: string | null = '';\n    private headerStarts = ['###### ', '##### ', '#### ', '### ', '## ', '# '];\n\n    private hLevel: number = 0;\n\n    constructor(data: string) {\n        super();\n        this.source = data.split('\\n');\n        console.log(this.source);\n    }\n\n\n    public parse(): Array<Markable> {\n        const ans = new Array<Markable>();\n        while (this.nextElement()) {\n            if (this.isParagraph()) {\n                this.tr = new TokenReader(this.curElem);\n                this.nextToken();\n                ans.push(new Paragraph(this.parseItems()));\n            } else {\n                this.tr = new TokenReader(this.curElem.substring(this.hLevel + 1));\n                this.nextToken();\n                ans.push(new Header(this.parseItems(), this.hLevel));\n            }\n        }\n        return ans;\n    }\n\n    private isText(token: Token) {\n        return token === Token.TEXT;\n    }\n\n    private parseItems(): Array<BlockItem> {\n        const ans = new Array<BlockItem>();\n        while (this.curToken !== Token.END) {\n            if (this.isText(this.curToken)) {\n                ans.push(new Text(this.curStringToken));\n                this.nextToken();\n            } else if (this.curToken === Token.IMG) {\n                ans.push(this.tr.getImg());\n                this.nextToken();\n            } else {\n                const start: Token = this.curToken;\n                this.nextToken();\n                ans.push(...this.parseItem(start));\n            }\n        }\n        return ans;\n    }\n\n    private parseItem(start: Token): Array<BlockItem> {\n        const ans = new Array<BlockItem>();\n        while (this.curToken !== Token.END && this.curToken !== start) {\n            if (this.isText(this.curToken)) {\n                ans.push(new Text(this.curStringToken));\n                this.nextToken();\n            } else if (this.curToken === Token.IMG) {\n                ans.push(this.tr.getImg());\n                this.nextToken();\n            } else {\n                const st: Token = this.curToken;\n                this.nextToken();\n                ans.push(...this.parseItem(st));\n            }\n        }\n        if (this.curToken === start) {\n            this.nextToken();\n            return this.create(ans, start);\n        } else if (start === Token.EMPHASIS || start === Token._EMPHASIS) {\n            const temp = new Array<BlockItem>();\n            temp.push(new Text(this.tokenToString(start)));\n            temp.push(...ans);\n            this.nextToken();\n            return temp;\n        } else {\n            throw 'Unclosed tag! expected ' + start + 'found ' + this.curToken;\n        }\n    }\n\n    private tokenToString(token: Token): string {\n        switch (token) {\n            case Token.STRIKEOUT: {\n                return '--';\n            }\n            case Token.STRONG: {\n                return '**';\n            }\n            case Token.__STRONG: {\n                return '__';\n            }\n            case Token.EMPHASIS: {\n                return '*';\n            }\n            case Token._EMPHASIS: {\n                return '_';\n            }\n            case Token.CODE: {\n                return '`';\n            }\n            default: {\n                throw 'atata';\n            }\n        }\n    }\n\n    private create(ans: Array<BlockItem>, token: Token): Array<BlockItem> {\n        switch (token) {\n            case Token.STRIKEOUT: {\n                return [new Strikeout(ans)];\n            }\n            case Token.STRONG: {\n                return [new Strong(ans)];\n            }\n            case Token.__STRONG: {\n                return [new Strong(ans)];\n            }\n            case Token.EMPHASIS: {\n                return [new Emphasis(ans)];\n            }\n            case Token._EMPHASIS: {\n                return [new Emphasis(ans)];\n            }\n            case Token.CODE: {\n                return [new Code(ans)];\n            }\n            default: {\n                throw 'atata';\n            }\n        }\n    }\n\n\n    private skipEmpties(): void {\n        this.curLine = this.next();\n        while (this.curLine !== null && this.curLine === '') {\n            this.curLine = this.next();\n        }\n    }\n\n    private nextElement(): boolean {\n        this.skipEmpties();\n        if (this.curLine === null) {\n            return false;\n        }\n        const elem = new Array<string>();\n        elem.push(this.curLine);\n        this.curLine = this.next();\n        while (this.curLine !== null && this.curLine !== '') {\n            elem.push('\\n');\n            elem.push(this.curLine);\n            this.curLine = this.next();\n        }\n        this.curElem = elem.join('');\n        return true;\n    }\n\n    next(): string | null {\n        const exp = this.source.length === 0 ? null : this.source.shift();\n        if (exp !== undefined) {\n            return exp\n        }\n        return null;\n    }\n\n    private isParagraph(): boolean {\n        for (const headerStart of this.headerStarts) {\n            if (this.curElem.startsWith(headerStart)) {\n                this.hLevel = headerStart.length - 1;\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n}\n"],"names":["Token","Image","name","src","toHtml","st","push","toMarkdown","TokenReader","source","CODE","Map","STRONG","EMPHASIS","STRIKEOUT","_EMPHASIS","__STRONG","IMG","pos","checkTag","tags","tag","startsWith","curTag","test","ch","length","parseImg","start","mid","end","imgName","substring","imgSrc","getImg","nextToken","END","curStringToken","temp","strToToken","get","curToken","undefined","sb","Array","charAt","TEXT","join","getStringToken","BaseParser","tr","Paragraph","elements","console","log","elem","Header","hLevel","Text","text","BlockMarkableItem","toMarkdownSuper","toHtmlSuper","Strikeout","Strong","Emphasis","Code","MdParser","data","split","parse","ans","nextElement","isParagraph","curElem","parseItems","isText","token","parseItem","create","tokenToString","skipEmpties","curLine","next","exp","shift","headerStarts","headerStart"],"mappings":"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"}