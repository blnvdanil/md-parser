{"version":3,"file":"md-parser.cjs.production.min.js","sources":["../src/Token.ts","../src/markup/Image.ts","../src/TokenReader.ts","../src/BaseParser.ts","../src/markup/Paragraph.ts","../src/markup/Header.ts","../src/markup/Text.ts","../src/markup/BlockMarkableItem.ts","../src/markup/Strikeout.ts","../src/markup/Strong.ts","../src/markup/Emphasis.ts","../src/markup/Code.ts","../src/MdParser.ts"],"sourcesContent":["export enum Token {\n  END,\n  EMPHASIS,\n  STRONG,\n  STRIKEOUT,\n  CODE,\n  TEXT,\n  _EMPHASIS,\n  __STRONG,\n  IMG\n}\n","import {BlockItem} from './BlockItem';\n\nexport class Image implements BlockItem {\n  private readonly name: string;\n  private readonly src: string;\n\n  constructor(name: string, src: string) {\n    this.name = name;\n    this.src = src;\n  }\n\n  toHtml(st: Array<string>): void {\n    st.push('<img alt=\\'');\n    st.push(this.name);\n    st.push('\\' src=\\'');\n    st.push(this.src);\n    st.push('\\'>');\n  }\n\n  toMarkdown(st: Array<string>): void {\n    throw st;\n  }\n\n\n}\n","import { Token } from './Token';\nimport { Image } from './markup/Image';\n\nexport class TokenReader {\n  private readonly source: string = '';\n\n  private pos: number = 0;\n\n  private curToken: Token = Token.CODE;\n\n  private curStringToken: string = '';\n\n  private tags: string[] = ['**', '__', '--', '*', '_', '`'];\n\n  private imgName: string = '';\n\n  private imgSrc: string = '';\n\n  private strToToken = new Map([\n    ['**', Token.STRONG],\n    ['*', Token.EMPHASIS],\n    ['--', Token.STRIKEOUT],\n    ['`', Token.CODE],\n    ['_', Token._EMPHASIS],\n    ['__', Token.__STRONG],\n    ['![', Token.IMG],\n  ]);\n\n  private curTag: string = '';\n\n  constructor(source: string, isImageRequired?: boolean) {\n    if (isImageRequired) {\n      this.tags.push('![');\n    }\n    this.source = source;\n    this.pos = 0;\n  }\n\n  private checkTag(): boolean {\n    for (const tag of this.tags) {\n      if (this.source.startsWith(tag, this.pos)) {\n        this.curTag = tag;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private test(ch: string): boolean {\n    return this.pos < this.source.length && ch === this.source[this.pos];\n  }\n\n  private parseImg(): void {\n    const start: number = this.pos;\n    let mid: number;\n    let end: number;\n    while (this.pos < this.source.length &&\n          !this.source.startsWith('](', this.pos)) {\n      this.pos++;\n    }\n    if (this.pos < this.source.length && this.source.startsWith('](', this.pos)) {\n      mid = this.pos;\n      while (this.pos < this.source.length && !this.source.startsWith(')', this.pos)) {\n        this.pos++;\n      }\n      if (this.pos < this.source.length && this.source.startsWith(')', this.pos)) {\n        end = this.pos;\n        this.imgName = this.source.substring(start, mid);\n        this.imgSrc = this.source.substring(mid + 2, end);\n        this.pos++;\n        return;\n      }\n    }\n    throw 'atata';\n  }\n\n  public getImg(): Image {\n    return new Image(this.imgName, this.imgSrc);\n  }\n\n  public nextToken(): Token {\n    if (this.pos >= this.source.length) {\n      return Token.END;\n    }\n\n    if (this.checkTag()) {\n      this.curStringToken = this.curTag;\n      const temp = this.strToToken.get(this.curTag);\n      this.curToken = temp === undefined ? Token.CODE : temp;\n      this.pos += this.curTag.length;\n      if (this.curToken === Token.IMG) {\n        this.parseImg();\n      }\n      return this.curToken;\n    }\n\n    const sb: Array<string> = new Array<string>();\n\n    while (this.pos < this.source.length && !this.checkTag()) {\n      const ch: string = this.source.charAt(this.pos++);\n      if (ch === '<') {\n        sb.push('&lt;');\n      } else if (ch === '>') {\n        sb.push('&gt;');\n      } else if (ch === '&') {\n        sb.push('&amp;');\n      } else if (ch === '\\\\' && this.pos < this.source.length && (this.test('*') || this.test('_'))) {\n        sb.push(this.source.charAt(this.pos++));\n      } else {\n        sb.push(ch);\n      }\n    }\n\n    this.curToken = Token.TEXT;\n\n    this.curStringToken = sb.join('');\n\n    return this.curToken;\n  }\n\n\n  public getStringToken(): string {\n    return this.curStringToken;\n  }\n}\n","import { TokenReader } from './TokenReader';\nimport { Token } from './Token';\n\nexport abstract class BaseParser {\n  protected tr: TokenReader;\n  protected curToken: Token;\n  protected curStringToken: string;\n\n  protected nextToken(): void {\n    this.curToken = this.tr.nextToken();\n    this.curStringToken = this.tr.getStringToken();\n  }\n\n  protected constructor() {\n    this.tr = new TokenReader('');\n    this.curToken = Token.CODE;\n    this.curStringToken = '';\n  }\n}\n","import {Markable} from './Markable';\nimport {BlockItem} from './BlockItem';\n\nexport class Paragraph implements Markable {\n  private readonly elements: Array<BlockItem>;\n\n  constructor(elements: Array<BlockItem>) {\n    this.elements = new Array<BlockItem>(...elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    st.push('<p>');\n    for (const elem of this.elements) {\n      elem.toHtml(st);\n    }\n    st.push('</p>');\n  }\n\n  toMarkdown(st: Array<string>): void {\n    for (const elem of this.elements) {\n      elem.toMarkdown(st);\n    }\n  }\n\n\n}\n","import {Markable} from './Markable';\nimport {BlockItem} from './BlockItem';\n\nexport class Header implements Markable {\n\n  private elements: Array<BlockItem>;\n  private hLevel: number;\n\n  constructor(elements: Array<BlockItem>, hLevel: number) {\n    this.hLevel = hLevel;\n    this.elements = new Array<BlockItem>(...elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    st.push(`<h${this.hLevel}>`);\n    for (const elem of this.elements) {\n      elem.toHtml(st);\n    }\n    st.push(`</h${this.hLevel}>`);\n  }\n\n  toMarkdown(st: Array<string>): void {\n    throw st;\n  }\n\n}\n","import {BlockItem} from './BlockItem';\n\nexport class Text implements BlockItem {\n  private text: string;\n\n  constructor(text: string) {\n    this.text = text;\n  }\n\n  toHtml(st: Array<string>): void {\n    st.push(this.text);\n  }\n\n  toMarkdown(st: Array<string>): void {\n    st.push(this.text);\n  }\n\n\n}\n","import {BlockItem} from './BlockItem';\n\nexport abstract class BlockMarkableItem implements BlockItem {\n  private elements: Array<BlockItem>;\n\n  protected constructor(elements: Array<BlockItem>) {\n    this.elements = new Array<BlockItem>(...elements);\n  }\n\n  protected toMarkdownSuper(start: string, end: string, st: Array<string>): void {\n    st.push(start);\n    for (const elem of this.elements) {\n      elem.toMarkdown(st);\n    }\n    st.push(end);\n  }\n\n  protected toHtmlSuper(start: string, end: string, st: Array<string>): void {\n    st.push(start);\n    for (const elem of this.elements) {\n      elem.toHtml(st);\n    }\n    st.push(end);\n  }\n\n  abstract toMarkdown(st: Array<string>): void;\n\n  abstract toHtml(st: Array<string>): void;\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Strikeout extends BlockMarkableItem {\n  constructor(elements: Array<BlockItem>) {\n    super(elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<s>', '</s>', st);\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('~', '~', st);\n  }\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Strong extends BlockMarkableItem {\n  constructor(elements: Array<BlockItem>) {\n    super(elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<strong>', '</strong>', st);\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('__', '__', st);\n  }\n}\n","import {BlockItem} from './BlockItem';\nimport {BlockMarkableItem} from './BlockMarkableItem';\n\nexport class Emphasis extends BlockMarkableItem {\n\n  constructor(elements: Array<BlockItem>) {\n    super(elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<em>', '</em>', st);\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('*', '*', st);\n  }\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Code extends BlockMarkableItem {\n\n  constructor(elements: Array<BlockItem>) {\n    super(elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('`', '`', st);\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('<code>', '</code>', st);\n  }\n}\n","import { BaseParser } from './BaseParser';\nimport { Markable } from './markup/Markable';\nimport { TokenReader } from './TokenReader';\nimport { Paragraph } from './markup/Paragraph';\nimport { Header } from './markup/Header';\nimport { Token } from './Token';\nimport { BlockItem } from './markup/BlockItem';\nimport { Text } from './markup/Text';\nimport { Strikeout } from './markup/Strikeout';\nimport { Strong } from './markup/Strong';\nimport { Emphasis } from './markup/Emphasis';\nimport { Code } from './markup/Code';\n\n\nexport class MdParser extends BaseParser {\n  private readonly source: Array<string>;\n  private curElem: string = '';\n  private curLine: string | null = '';\n  private headerStarts = ['###### ', '##### ', '#### ', '### ', '## ', '# '];\n\n  private hLevel: number = 0;\n\n  isHeaderRequired: boolean = false;\n  isImageRequired: boolean = false;\n\n  constructor(data: string, isHeaderRequired?: boolean, isImageRequired?: boolean) {\n    super();\n    this.isImageRequired = !!isImageRequired;\n    this.isHeaderRequired = !!isHeaderRequired;\n    this.source = data.split('\\n');\n  }\n\n\n  public parse(): Array<Markable> {\n    const ans = new Array<Markable>();\n    while (this.nextElement()) {\n      if (this.isParagraph()) {\n        this.tr = new TokenReader(this.curElem, this.isImageRequired);\n        this.nextToken();\n        ans.push(new Paragraph(this.parseItems()));\n      } else {\n        this.tr = new TokenReader(this.curElem.substring(this.hLevel + 1), this.isImageRequired);\n        this.nextToken();\n        ans.push(new Header(this.parseItems(), this.hLevel));\n      }\n    }\n    return ans;\n  }\n\n  private isText(token: Token) {\n    return token === Token.TEXT;\n  }\n\n  private parseItems(): Array<BlockItem> {\n    const ans = new Array<BlockItem>();\n    while (this.curToken !== Token.END) {\n      if (this.isText(this.curToken)) {\n        ans.push(new Text(this.curStringToken));\n        this.nextToken();\n      } else if (this.curToken === Token.IMG) {\n        ans.push(this.tr.getImg());\n        this.nextToken();\n      } else {\n        const start: Token = this.curToken;\n        this.nextToken();\n        ans.push(...this.parseItem(start));\n      }\n    }\n    return ans;\n  }\n\n  private parseItem(start: Token): Array<BlockItem> {\n    const ans = new Array<BlockItem>();\n    while (this.curToken !== Token.END && this.curToken !== start) {\n      if (this.isText(this.curToken)) {\n        ans.push(new Text(this.curStringToken));\n        this.nextToken();\n      } else if (this.curToken === Token.IMG) {\n        ans.push(this.tr.getImg());\n        this.nextToken();\n      } else {\n        const st: Token = this.curToken;\n        this.nextToken();\n        ans.push(...this.parseItem(st));\n      }\n    }\n    if (this.curToken === start) {\n      this.nextToken();\n      return this.create(ans, start);\n    } else if (start === Token.EMPHASIS || start === Token._EMPHASIS) {\n      const temp = new Array<BlockItem>();\n      temp.push(new Text(this.tokenToString(start)));\n      temp.push(...ans);\n      this.nextToken();\n      return temp;\n    } else {\n      throw 'Unclosed tag! expected ' + start + 'found ' + this.curToken;\n    }\n  }\n\n  private tokenToString(token: Token): string {\n    switch (token) {\n      case Token.STRIKEOUT: {\n        return '--';\n      }\n      case Token.STRONG: {\n        return '**';\n      }\n      case Token.__STRONG: {\n        return '__';\n      }\n      case Token.EMPHASIS: {\n        return '*';\n      }\n      case Token._EMPHASIS: {\n        return '_';\n      }\n      case Token.CODE: {\n        return '`';\n      }\n      default: {\n        throw 'atata';\n      }\n    }\n  }\n\n  private create(ans: Array<BlockItem>, token: Token): Array<BlockItem> {\n    switch (token) {\n      case Token.STRIKEOUT: {\n        return [new Strikeout(ans)];\n      }\n      case Token.STRONG: {\n        return [new Strong(ans)];\n      }\n      case Token.__STRONG: {\n        return [new Strong(ans)];\n      }\n      case Token.EMPHASIS: {\n        return [new Emphasis(ans)];\n      }\n      case Token._EMPHASIS: {\n        return [new Emphasis(ans)];\n      }\n      case Token.CODE: {\n        return [new Code(ans)];\n      }\n      default: {\n        throw 'atata';\n      }\n    }\n  }\n\n  private skipEmpties(): void {\n    this.curLine = this.next();\n    while (this.curLine !== null && this.curLine === '') {\n      this.curLine = this.next();\n    }\n  }\n\n  private nextElement(): boolean {\n    this.skipEmpties();\n    if (this.curLine === null) {\n      return false;\n    }\n    const elem = new Array<string>();\n    elem.push(this.curLine);\n    this.curLine = this.next();\n    while (this.curLine !== null && this.curLine !== '') {\n      elem.push('\\n');\n      elem.push(this.curLine);\n      this.curLine = this.next();\n    }\n    this.curElem = elem.join('');\n    return true;\n  }\n\n  next(): string | null {\n    const exp = this.source.length === 0 ? null : this.source.shift();\n    if (exp !== undefined) {\n      return exp;\n    }\n    return null;\n  }\n\n  private isParagraph(): boolean {\n    if (this.isHeaderRequired) {\n      for (const headerStart of this.headerStarts) {\n        if (this.curElem.startsWith(headerStart)) {\n          this.hLevel = headerStart.length - 1;\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n}\n"],"names":["Token","Image","name","src","toHtml","st","push","this","toMarkdown","TokenReader","source","isImageRequired","CODE","Map","STRONG","EMPHASIS","STRIKEOUT","_EMPHASIS","__STRONG","IMG","tags","pos","checkTag","tag","startsWith","curTag","test","ch","length","parseImg","mid","end","start","imgName","substring","imgSrc","getImg","nextToken","END","curStringToken","temp","strToToken","get","curToken","undefined","sb","Array","charAt","TEXT","join","getStringToken","BaseParser","tr","Paragraph","elements","Header","hLevel","Text","text","BlockMarkableItem","toMarkdownSuper","toHtmlSuper","Strikeout","_BlockMarkableItem","Strong","Emphasis","Code","MdParser","data","isHeaderRequired","split","parse","ans","nextElement","isParagraph","curElem","parseItems","isText","token","parseItem","create","tokenToString","skipEmpties","curLine","next","elem","exp","shift","headerStarts","headerStart"],"mappings":"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"}