{"version":3,"file":"md-parser.cjs.production.min.js","sources":["../src/Token.ts","../src/TokenReader.ts","../src/BaseParser.ts","../src/markup/Paragraph.ts","../src/markup/Text.ts","../src/markup/BlockMarkableItem.ts","../src/markup/Strikeout.ts","../src/markup/Strong.ts","../src/markup/Emphasis.ts","../src/markup/Code.ts","../src/MdParser.ts"],"sourcesContent":["export enum Token {\n  END,\n  EMPHASIS,\n  STRONG,\n  STRIKEOUT,\n  CODE,\n  TEXT,\n}\n","import { Token } from './Token';\n\nexport class TokenReader {\n  private readonly source: string = '';\n\n  private pos: number = 0;\n\n  private curToken: Token = Token.CODE;\n\n  private curStringToken: string = '';\n\n  private tags: string[] = ['**', '__', '~~', '```'];\n\n\n  private strToToken = new Map([\n    ['**', Token.STRONG],\n    ['__', Token.EMPHASIS],\n    ['~~', Token.STRIKEOUT],\n    ['```', Token.CODE],\n  ]);\n\n  private curTag: string = '';\n\n  constructor(source: string) {\n    this.source = source;\n    this.pos = 0;\n  }\n\n  private checkTag(): boolean {\n    for (const tag of this.tags) {\n      if (this.source.startsWith(tag, this.pos)) {\n        this.curTag = tag;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private test(ch: string): boolean {\n    return this.pos < this.source.length && ch === this.source[this.pos];\n  }\n\n  public nextToken(): Token {\n    if (this.pos >= this.source.length) {\n      return Token.END;\n    }\n\n    if (this.checkTag()) {\n      this.curStringToken = this.curTag;\n      const temp = this.strToToken.get(this.curTag);\n      this.curToken = temp === undefined ? Token.CODE : temp;\n      this.pos += this.curTag.length;\n      return this.curToken;\n    }\n\n    const sb: Array<string> = new Array<string>();\n\n    while (this.pos < this.source.length && !this.checkTag()) {\n      const ch: string = this.source.charAt(this.pos++);\n      if (ch === '<') {\n        sb.push('&lt;');\n      } else if (ch === '>') {\n        sb.push('&gt;');\n      } else if (ch === '&') {\n        sb.push('&amp;');\n      } else if (ch === '\\\\' && this.pos < this.source.length && (this.test('*') || this.test('_'))) {\n        sb.push(this.source.charAt(this.pos++));\n      } else if (ch === '\\n') {\n        sb.push('<br>');\n      } else {\n        sb.push(ch);\n      }\n    }\n\n    this.curToken = Token.TEXT;\n\n    this.curStringToken = sb.join('');\n\n    return this.curToken;\n  }\n\n\n  public getStringToken(): string {\n    return this.curStringToken;\n  }\n}\n","import { TokenReader } from './TokenReader';\nimport { Token } from './Token';\n\nexport abstract class BaseParser {\n  protected tr: TokenReader;\n  protected curToken: Token;\n  protected curStringToken: string;\n\n  protected nextToken(): void {\n    this.curToken = this.tr.nextToken();\n    this.curStringToken = this.tr.getStringToken();\n  }\n\n  protected constructor() {\n    this.tr = new TokenReader('');\n    this.curToken = Token.CODE;\n    this.curStringToken = '';\n  }\n}\n","import {Markable} from './Markable';\nimport {BlockItem} from './BlockItem';\n\nexport class Paragraph implements Markable {\n  private readonly elements: Array<BlockItem>;\n\n  constructor(elements: Array<BlockItem>) {\n    this.elements = new Array<BlockItem>(...elements);\n  }\n\n  toHtml(st: Array<string>): void {\n    st.push('');\n    for (const elem of this.elements) {\n      elem.toHtml(st);\n    }\n    st.push('');\n  }\n\n  toMarkdown(st: Array<string>): void {\n    for (const elem of this.elements) {\n      elem.toMarkdown(st);\n    }\n  }\n\n  toText(st: Array<string>) {\n    for (const elem of this.elements) {\n      elem.toText(st);\n    }\n  }\n\n\n}\n","import {BlockItem} from './BlockItem';\n\nexport class Text implements BlockItem {\n    private text: string;\n\n    constructor(text: string) {\n        this.text = text;\n    }\n\n    toHtml(st: Array<string>): void {\n        st.push(this.text);\n    }\n\n    toMarkdown(st: Array<string>): void {\n        st.push(this.text);\n    }\n\n    toText(st: Array<string>): void {\n        st.push(this.text);\n    }\n}\n","import {BlockItem} from './BlockItem';\n\nexport abstract class BlockMarkableItem implements BlockItem {\n  private readonly elements: Array<BlockItem>;\n\n  protected closed: boolean = true;\n\n  protected constructor(elements: Array<BlockItem>, closed: boolean) {\n    this.closed = !!closed;\n    this.elements = new Array<BlockItem>(...elements);\n  }\n\n\n  protected toMarkdownSuper(start: string, end: string, st: Array<string>): void {\n    st.push(start);\n    for (const elem of this.elements) {\n      elem.toMarkdown(st);\n    }\n    st.push(end);\n  }\n\n  protected toHtmlSuper(start: string, end: string, st: Array<string>, startOnly: string): void {\n    if (!this.closed) {\n      start = startOnly;\n      end = '';\n    }\n    st.push(start);\n    for (const elem of this.elements) {\n      elem.toHtml(st);\n    }\n    st.push(end);\n  }\n\n  public toText(st: Array<string>): void {\n    for (const elem of this.elements) {\n      elem.toText(st);\n    }\n  }\n\n  abstract toMarkdown(st: Array<string>): void;\n\n  abstract toHtml(st: Array<string>): void;\n}\n\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Strikeout extends BlockMarkableItem {\n  constructor(elements: Array<BlockItem>, closed: boolean) {\n    super(elements, closed);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<s>', '</s>', st, \"~~\");\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('~~', '~~', st);\n  }\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Strong extends BlockMarkableItem {\n  constructor(elements: Array<BlockItem>, closed: boolean) {\n    super(elements, closed);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<strong>', '</strong>', st, \"**\");\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('**', '**', st);\n  }\n}\n","import {BlockItem} from './BlockItem';\nimport {BlockMarkableItem} from './BlockMarkableItem';\n\nexport class Emphasis extends BlockMarkableItem {\n\n  constructor(elements: Array<BlockItem>, closed: boolean) {\n    super(elements, closed);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<em>', '</em>', st, '__');\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('__', '__', st);\n  }\n}\n","import {BlockMarkableItem} from './BlockMarkableItem';\nimport {BlockItem} from './BlockItem';\n\nexport class Code extends BlockMarkableItem {\n\n  constructor(elements: Array<BlockItem>, closed: boolean) {\n    super(elements, closed);\n  }\n\n  toHtml(st: Array<string>): void {\n    super.toHtmlSuper('<code>', '</code>', st, '```');\n  }\n\n  toMarkdown(st: Array<string>): void {\n    super.toMarkdownSuper('```', '```', st);\n  }\n}\n","import {BaseParser} from './BaseParser';\nimport {Markable} from './markup/Markable';\nimport {TokenReader} from './TokenReader';\nimport {Paragraph} from './markup/Paragraph';\nimport {Token} from './Token';\nimport {BlockItem} from './markup/BlockItem';\nimport {Text} from './markup/Text';\nimport {Strikeout} from './markup/Strikeout';\nimport {Strong} from './markup/Strong';\nimport {Emphasis} from './markup/Emphasis';\nimport {Code} from './markup/Code';\n\n\nexport class MdParser extends BaseParser {\n  private readonly source: Array<string>;\n  private curElem: string = '';\n  private curLine: string | null = '';\n\n  thrownError: boolean = false;\n\n  isHeaderRequired: boolean = false;\n  isLinkRequired: boolean = false;\n\n  constructor(data: string, isHeaderRequired?: boolean, isImageRequired?: boolean) {\n    super();\n    this.isLinkRequired = !!isImageRequired;\n    this.isHeaderRequired = !!isHeaderRequired;\n    this.source = [data];\n    console.log(\"data\", [data])\n  }\n\n  replaceHtmlSpecials(data: string): string {\n    const sb: Array<string> = [];\n    for (const ch of data) {\n      if (ch === '<') {\n        sb.push('&lt;');\n      } else if (ch === '>') {\n        sb.push('&gt;');\n      } else if (ch === '&') {\n        sb.push('&amp;');\n      } else {\n        sb.push(ch);\n      }\n    }\n    return sb.join('');\n  }\n\n  public parseToHtml(): string {\n    const res = this.parse();\n    const html: Array<string> = [];\n    for (const elem of res) {\n      elem.toHtml(html);\n    }\n    return html.join('');\n  }\n\n  public parse(): Array<Markable> {\n    const ans = new Array<Markable>();\n    while (this.nextElement()) {\n      this.tr = new TokenReader(this.curElem);\n      this.nextToken();\n      ans.push(new Paragraph(this.parseItems()));\n    }\n    console.log(\"ans:\", ans)\n    return ans;\n  }\n\n  private static isText(token: Token) {\n    return token === Token.TEXT;\n  }\n\n  private parseItems(): Array<BlockItem> {\n    const ans = new Array<BlockItem>();\n    while (this.curToken !== Token.END) {\n      if (MdParser.isText(this.curToken)) {\n        ans.push(new Text(this.curStringToken));\n        this.nextToken();\n      } else {\n        const start: Token = this.curToken;\n        this.nextToken();\n        ans.push(...this.parseItem(start));\n      }\n    }\n    return ans;\n  }\n\n  private parseItem(start: Token): Array<BlockItem> {\n    const ans = new Array<BlockItem>();\n    while (this.curToken !== Token.END && this.curToken !== start) {\n      if (MdParser.isText(this.curToken)) {\n        ans.push(new Text(this.curStringToken));\n        this.nextToken();\n      } else {\n        const st: Token = this.curToken;\n        this.nextToken();\n        ans.push(...this.parseItem(st));\n      }\n    }\n    if (this.curToken === start) {\n      this.nextToken();\n      return this.create(ans, start, true);\n    } else {\n      this.nextToken();\n      return this.create(ans, start, false);\n    }\n  }\n\n  private create(ans: Array<BlockItem>, token: Token, closed: boolean): Array<BlockItem> {\n    switch (token) {\n      case Token.STRIKEOUT: {\n        return [new Strikeout(ans, closed)];\n      }\n      case Token.STRONG: {\n        return [new Strong(ans, closed)];\n      }\n      case Token.EMPHASIS: {\n        return [new Emphasis(ans, closed)];\n      }\n      case Token.CODE: {\n        return [new Code(ans, closed)];\n      }\n      default: {\n        this.thrownError = true;\n        return [new Code(ans, closed)];\n      }\n    }\n  }\n\n  private skipEmpties(): void {\n    this.curLine = this.next();\n    while (this.curLine !== null && this.curLine === '') {\n      this.curLine = this.next();\n    }\n  }\n\n  private nextElement(): boolean {\n    this.skipEmpties();\n    if (this.curLine === null) {\n      return false;\n    }\n    const elem = new Array<string>();\n    elem.push(this.curLine);\n    this.curLine = this.next();\n    while (this.curLine !== null && this.curLine !== '') {\n      elem.push('\\n');\n      elem.push(this.curLine);\n      this.curLine = this.next();\n    }\n    console.log(elem);\n    this.curElem = elem.join('');\n    return true;\n  }\n\n  next(): string | null {\n    const exp = this.source.length === 0 ? null : this.source.shift();\n    if (exp !== undefined) {\n      return exp;\n    }\n    return null;\n  }\n}\n"],"names":["Token","TokenReader","source","CODE","Map","STRONG","EMPHASIS","STRIKEOUT","pos","checkTag","this","tags","tag","startsWith","curTag","test","ch","length","nextToken","END","curStringToken","temp","strToToken","get","curToken","undefined","sb","Array","charAt","push","TEXT","join","getStringToken","BaseParser","tr","Paragraph","elements","toHtml","st","toMarkdown","toText","Text","text","BlockMarkableItem","closed","toMarkdownSuper","start","end","toHtmlSuper","startOnly","Strikeout","_BlockMarkableItem","Strong","Emphasis","Code","MdParser","data","isHeaderRequired","isImageRequired","isLinkRequired","console","log","replaceHtmlSpecials","parseToHtml","html","parse","ans","nextElement","curElem","parseItems","isText","token","parseItem","create","thrownError","skipEmpties","curLine","next","elem","exp","shift"],"mappings":"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"}